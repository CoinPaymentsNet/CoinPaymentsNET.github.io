openapi: 3.1.0
info:
  version: 2.0.0
  title: CoinPayments API Documentation
  x-logo:
    url: ./logo.png
  description: >
    Welcome to CoinPayments API documentation!


    ![markdown file changed](./charlie.png)


    CoinPayments API is a RESTful JSON API for interacting with blockchains,

    accessed over HTTP or HTTPS from the domain
    **https://api.coinpayments.net/api/v1/**


    # Overview

    Coinpayments API docs defines a standard, language-agnostic interface to
    CoinPayments API.

    The platform allows merchants to integrate the payment system into their own
    websites or applications,

    allowing their customers to pay for goods or services with cryptocurrency.

    The API documentation provides the necessary information for developers to
    integrate the payment system into their own platforms,

    including details on how to authenticate requests, what parameters to
    include in requests and responses, and how to handle errors.

    Overall, the API is designed to provide a simple and secure way for
    merchants to accept cryptocurrency payments from their customers.

    In these docs you'll find everything you need to leverage CoinPayments for
    your applications.



    # Features

    CoinPayments provides a multi-currency wallet that enables businesses and
    individuals to store, send,

    and receive a wide range of digital currencies and tokens.

    The free-to-set-up wallet is available on web and mobile, enabling account
    management online and on the go.


    #### Some of the key features of the website include:

    1. Support for multiple popular cryptocurrencies, allowing customers to pay
    with the digital currency of their choice.

    2. Generate invoices and manually share them with buyers through a link or
    via email.

    3. Callback Addresses feature allows merchant to receive payment without
    specifying the amount or time in advance.

    4. Real-time updates using Webhooks, The API provides updates on the status
    of transactions, allowing merchants and customers to track the progress of
    their payments.

    5. Advanced security measures to ensure that all transactions are safe and
    secure.



    # Common API Errors

    This section provides an overview of the common errors that you may
    encounter when utilizing CoinPayment API. By familiarizing yourself with
    these errors, you will be better equipped to handle potential issues and
    troubleshoot effectively. Understanding these errors will contribute to a
    smoother integration process and ensure a more seamless payment experience
    for your users.


    ### Unauthorized

    This error occurs when an invalid `clientId` or `clientSecret` is used to
    generate API signature to authenticate requests. It may also occur if a
    `clientId` is valid but the integration is either deleted or the user's
    account does not exist. or an invalid or incorrect client secret is
    provided. In such cases, the API returns an "Unauthorized" error.


    ### Insufficient Funds

    This error can occur in different scenarios, such as during withdrawal to an
    external address or when converting a coin to another, whether to an
    internal or external address. It arises when the user's wallet does not have
    enough balance to cover the requested transaction amount.


    ### Invalid Address

    When sending a request to create a withdrawal or a conversion, if the
    provided address is not valid or formatted incorrectly, this error is
    triggered. Users should double-check the address they provided and ensure it
    follows the required format. here are examples of Valid addresses



    #### Valid UTXO-Based Coin Addresses:

    - Bitcoin (BTC): `1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2`

    - Bitcoin Cash (BCH):
    `bitcoincash:qr7uq7uvujmzhcv29tw92q0hs7fwpht4fvl4a4kj9a`

    - Litecoin (LTC): `LZx9pzGfH6mKSzVsJZnryeVrRzt6X8uZ9r`


    #### Valid Token Coin Addresses:

    - Ethereum (ETH): `0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf`

    - ERC-20 Tokens (e.g., DAI, USDT):
    `0x6B175474E89094C44Da98b954EedeAC495271d0F`



    ### Invalid or Unsupported Currency:

    This error occurs when the requested invoice, withdrawal, conversion
    involves an invalid or unsupported currency. It could be due to the currency
    not being listed or supported on the platform. Users can utilize the
    currencies API included in the documentation to list all supported
    currencies and verify if their intended currency is supported before
    initiating the transaction.


    ### Bad request ( Input validation errors ):

    This error occurs when there are issues with the validation of fields in the
    request's payload. For example, if a required field is not sent, or if the
    fields have invalid values or incorrect types. The API response for a
    validation error includes a description of the error and may provide details
    about the missing fields or the specific issues with the payload.




    # Rate limits

    The API provides access to our platform's data and functionality, but in
    order to maintain the stability and performance of our services, rate limits
    have been implemented. Rate limits are set to prevent excessive use of the
    API and to ensure fair usage among all integrations.

    Currently, the rate limit is capped at a maximum of 70 requests per second.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: Authentication
    description: >
      CoinPayments API uses SHA-256 which is a way of authenticating an API
      request to ensure that it comes from a trusted source.

      In this scheme, the API server generates a unique signature for each
      request using the SHA-256 hashing algorithm.



      #### Prerequisites

      To Integrate Coin Payments API you need to obtain CLIENT ID and CLIENT
      SECRET.

      If you have already created your credentials, you may skip to next
      section.



      ## Create credentials

      First, you need to [create an
      account](https://signin.coinpayments.net/Identity/Account/SignUp?returnUrl=%2Fconnect%2Fauthorize%2Fcallback%3Fclient_id%3Dcoinpayments-aphrodite%26response_type%3Did_token%2520token%26scope%3Dopenid%2520profile%2520orion%26redirect_uri%3Dhttps%253A%252F%252Fnew.coinpayments.net%252Fcallback%26nonce%3D5c9d038a-7d3b-410d-345c-1b196492ce13)

      ##### Once you're logged into your account, click on Integrations üëá


      ![markdown file changed](./integrations-1.png)



      ##### API Integrations üèó

      ![markdown file changed](./integration-2.png)



      ##### Add integration ‚ûï

      ![markdown file changed](./integration-3.png)



      ##### Give a name and a URL to your integration - more on the URL later.

      ![markdown file changed](./integration-4.png)




      **Warning**

      It is strongly recommended that you save your credentials after they are
      shown to you.

      Your credentials will only be displayed once, and if you lose them, you
      will not be able to access the API.

      Please take the time to save your credentials in a secure location so that
      you can use them in the future.


      ---


      ## Generate API Signature

      In order to properly sign an authenticated request for the CoinPayments v2
      API, the following headers must be included:


      * `X-CoinPayments-Client`

      * `X-CoinPayments-Timestamp`

      * `X-CoinPayments-Signature`


      The following sections are instructions for properly populating these
      headers.


      ---


      ### X-CoinPayments-Client

      Populate this header with your **CLIENT ID**


      Example value

      `cc7caaa431d54ad6accfd28b20170ee4`



      ---

      ### X-CoinPayments-Timestamp

      Before we Populate this header with the current time as a UNIX timestamp,
      exclude the milliseconds epoch, example:


      ```javascript

      const date = new Date().toISOString().split(".")[0];

      ```


      Example value:

      `2022-12-19T19:27:04`

      ---

      ### Construct the request queryString

      To create an API signature, you first need to construct the query string
      which is made of the

      following attributes concatenated together

      * method

      * url

      * clientId

      * date


      Example ( Javascript )

      ```javascript

      const queryString =
      `\ufeff${method}${url}${clientId}${date}${JSON.stringify(requestPayload)}`;

      ```


      For requests with no request body, replace last attribute by an empty
      string:

      Example ( Javascript )

      ```javascript

      const queryString = `\ufeff${method}${url}${clientId}${''}`;

      ```


      ---

      ### X-CoinPayments-Signature

      Next step is to use your `clientSecret` to generate the signature using
      SHA-256 encryption algorithm as follows:


      ```javascript

      const hash = CryptoJS.HmacSHA256(queryString,
      CryptoJS.enc.Utf8.parse(clientSecret));

      const signature = CryptoJS.enc.Base64.stringify(hash);

      ```

      Example value:

      `oW7d1ktvK7R6741oACgVR3bysGTPY8tqren0WTmmEk0=`


      ---

      Here is a complete example of how to generate an API signature for making
      a call to the create wallet API:

      ```javascript

      const clientId = 'd0ccc52b8204460783d375e278082de2';

      const clientSecret = 'WYEB+hN+89waO76QeO9T7IIqhdo/60GHrdYu2vEa7Tg=';

      const url = `https://api.coinpayments.net/api/v1/merchant/wallets`;

      const method = 'POST';

      const date = new Date().toISOString().split('.')[0];


      const createWalletDto = {
        currencyId: 2,
        label: 'Online Shop Wallet',
        webhookUrl: 'https://mysite.com/api/v1/payment/notification',
      };


      const queryString =
      `\ufeff${method}${url}${clientId}${date}${JSON.stringify(createWalletDto)}`;



      const hash = CryptoJS.HmacSHA256(queryString,
      CryptoJS.enc.Utf8.parse(clientSecret));

      const signature = CryptoJS.enc.Base64.stringify(hash);


      const headers = {
        'X-CoinPayments-Client': clientId,
        'X-CoinPayments-Timestamp': date,
        'X-CoinPayments-Signature': signature,
      };



      /** Make API call using axios ( you may choose any http client ) */

      const axiosoptions = {
        url,
        headers,
        method,
        data: createWalletDto,
      };


      const response = await this.httpsService.request(options).toPromise();

      console.log(response);

      ```



      ---
  - name: Invoices API
    description: >-
      CoinPayments exposes invoices API endpoints allowing merchants to
      implement a payment gateway on their platform and let 

      buyers pay for goods and services in cryptocurrencies supported by the
      merchant‚Äôs platform.

      With CoinPayments invoices API you may:
       - send out invoices to their clients.
       - launch an integrated hosted checkout to merchant‚Äôs payment flow that will be acting on the whitelabeling basis.
      CoinPayment‚Äôs invoices API is built around ‚Äúinvoice‚Äù entity. In other
      words, under the hood it generates an invoice with

      all the buyer‚Äôs and merchant‚Äôs data plus information on the
      product/service. Thus, merchant‚Äôs will be flexible in 

      managing payments with the help of this data via a set of available
      endpoints.

      Below you will find information on how payment flow is organized for each
      of the above-mentioned approaches.


      **Payment Flow for Sent out Invoices**


      Imagine a case where you have a platform that provides services on
      subscription basis. Every month you need to send out 

      invoices to your users with the reminder to pay for the subscription. In
      order to automate this flow, you may want to 

      use CoinPayments API. Here are the steps that should take place in order
      payment could occur:


      1. Merchant adds details on services for which invoice is issued,
      indicates user‚Äôs details like name, payment address 

      and email

      2. With the help of Create Invoice endpoint merchant generates an invoice
      entity with the data from step 1 and launches 

      the payment flow

      3. As a response to the Create Invoice endpoint, merchant receives all
      invoice entity data including:
       - paymentId to get payment address and check payment status
       - link to the invoice document with the active payment button that would lead user to payment checkout
       - date when invoice expires
       - array of allowed currencies with currency description, payment amount and fees.

      4. Link to the invoice is sent to the user‚Äôs email address

      5. User selects currency for payment, which triggers the Get Payment
      Address endpoint and merchant receives payment 

      address

      6. After that merchant can check the status of the payment with the help
      of Get Payment Status endpoint that includes:
       - status of payment
       - how much was detected and confirmed on blockchain
       - how much was detected but not confirmed yet.

      **Payment Flow for Integrated Checkout with Whitelabeling**


      Imagine a case where you have an online shop and you want to accept
      payment for goods in cryptocurrency. With 

      CoinPayments API you will be able to allow buyers to add goods to the
      shopping cart, click ‚Äúpay‚Äù and they will be 

      forwarded to the payment gateway provided by CoinPayments. Here are the
      steps that should take place in order payment 

      could occur:


      1. Buyer selects product/service on the merchant‚Äôs site.

      2. With the help of Create Invoice endpoint merchant generates an invoice
      entity and launches the payment flow.

      3. As a response to the Create Invoice endpoint, merchant receives all
      invoice entity data including:
       - paymentId to get payment address and check payment status
       - link to the checkout for payment
       - date when invoice expires
       - array of allowed currencies with currency description, payment amount and fees.
      4. Once buyer clicks ‚ÄúPay‚Äù in your website, they are forwarded to the
      CoinPayments checkout window where they select 

      currency for payment. This triggers the Get Payment Address endpoint and
      merchant receives payment address

      5. After that merchant can check the status of the payment with the help
      of Get Payment Status endpoint that includes:
       - status of payment
       - how much was detected and confirmed on blockchain
       - how much was detected but not confirmed yet.

      Below we will provide you with the detailed information on each of the
      invoices endpoints and their field values. 

      Although endpoints are the same for both described use-cases, there exists
      a slight difference in fields to be used for 

      either flow which will be addressed additionally.
  - name: Wallets API
    description: >+
      The Wallets API enables merchants to create and manage their wallets and
      wallet addresses. This is made possible through a set of endpoints that
      enable merchants to create new wallets with the coins supported by the
      platform, as well as initiate withdrawal requests from their wallets to
      any external or internal address of their choosing. With this powerful
      functionality, merchants have full control and flexibility in managing
      their cryptocurrency wallets to cater to their specific business needs.



      **Important Note:**


      If WebhookUrl field of the body is specified, then the following requests
      will be sent to the provided URL (maximum 5 attempts with 5-seconds
      timeout for a single request and 1-second delay between retries). All keys
      and values of the webhook payloads are strings. Samples of data being
      sent:


      1- When wallet is activated:

      ```javascript

      {
        "eventType" : "walletActivated",
        "walletId" : "58f78b24-1de0-42b3-9a48-94f3e9c57752",
        "walletAddress" : "0x063c9743195f53c85c8ebbdaa5916da3502b24ac"
      }

      ```




      2- When funds are received (amount is in currency's smallest units):

      ```javascript

      {
        "eventType" : "transferReceived",
        "walletId" : "58f78b24-1de0-42b3-9a48-94f3e9c57752",
        "currencyId" : "4",
        "transactionId" : "f8ea1354-b3c9-470f-af09-c2ba96f2e391" ,
        "amount" : "1000000000000000000"
      }

      ```




      3- When sent transaction is confirmed:

      ```javascript

      {
        "eventType" : "transferConfirmed",
        "fromWalletId" : "58f78b24-1de0-42b3-9a48-94f3e9c57752",
        "transactionId" : "f8ea1354-b3c9-470f-af09-c2ba96f2e391",
        "spendRequestId" : "c25bb620-ffdd-4b63-9ae6-dd8f2645c8f6",
        "txHash" : "0xdb247c2d1db3ee09658bced93761360e24d8fe555b79661f252470305babfd3d",
        "block" : "11286611"
      }

      ```

  - name: Webhooks API
    description: >-
      CoinPayments API offers webhook notifications, a powerful feature that
      allows merchants to seamlessly enable and manage notifications sent from
      CoinPayments API to their own merchant API when specific events occur.
      This provides merchants with real-time updates on important activities
      within their CoinPayments account.


      To set up webhook notifications, merchants can easily define a public
      endpoint URL on their server API and specify the events for which they
      want to receive notifications. Currently, CoinPayments supports webhook
      notifications for invoices, with plans to extend support to merchant
      wallets in the future.


      It's important to note that webhooks are tied to integration clients, and
      merchants can create multiple clients under their main account on the
      CoinPayments website, providing flexibility and customization options.


      Here is a list of invoice events for which merchants can choose to receive
      notifications:


      - **invoiceCreated:** triggered when a new invoice is created

      - **invoicePending:** triggered when an invoice is pending payment

      - **invoicePaid:** triggered when an invoice is successfully paid, a paid
      invoice means the funds are received in the seller or merchant's wallet,
      however the transaction is not yet settled or confirmed on the blockchain.

      - **invoiceCompleted:** triggered when the invoice is paid **and** the
      transaction has aquired the minimum confirmations required to mark it
      confirmed. only when an invoice is marked `Completed`, users are free to
      use the funds.

      - **invoiceCancelled:** triggered when an invoice is cancelled


      Merchants have the flexibility to create webhooks either through the
      user-friendly UI or via API calls. To create a webhook through the UI,
      simply follow these steps:


      - Access the dashboard and click on "Integrations" in the left sidebar.

      - Choose "API integrations", click "Add New", and provide a name for your
      integration client, along with your server URL.

      - On the right side of the popup screen, open the dropdown menu to specify
      the events for which you wan- to receive notifications.

      - Click "OK" to confirm your selections.


      Once completed, your webhook notifications are all set, and your API will
      receive notifications based on the events you have chosen. This allows you
      to stay updated in real-time on the activities that matter most to your
      business.


      Notification Payload will include the event type, timestamp of the invoice
      status update, and the actual invoice object


      </br>

      </br>

      Below is a descriptive flowchart illustrating the process of webhook
      notifications. This example specifically focuses on the scenario where the
      client intends for their server API to receive notifications upon invoice 
      completion


      ![markdown file changed](./webhook-flowchart.png)
servers:
  - url: https://api.coinpayments/api/v1
paths:
  /currencies:
    get:
      tags:
        - Currencies API
      summary: List currencies and their capabilities
      description: >-
        Returns a page of the supported currencies on the CoinPayments.net
        platform, by default ordered by their rank on CoinPayments.net.
      operationId: listPlatformSupportedCurrencies
      parameters:
        - name: q
          in: query
          schema:
            type: string
            example: BTC
          description: search query to find currencies by name or symbol
        - name: types
          in: query
          schema:
            type: string
            example: crypto,token,fiat
          description: >-
            comma separated list of the types of currencies to return (e.g.
            'coin', 'token', 'fiat', etc.). By default currencies of all types
            are returned
        - name: capabilities
          in: query
          schema:
            type: string
            example: multiSigAccounts,sharedAccounts,payments,singleSigAccounts
          description: search query to find currencies by name or symbol
        - name: after
          in: query
          schema:
            type: string
            example: ''
          description: search query to find currencies by name or symbol
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/arrayOfCurrencies'
        '400':
          description: Bad Request
  /currencies/{id}:
    get:
      tags:
        - Currencies API
      summary: Get currency by Id
      description: |
        Get Currency by Id
      operationId: getCurrencyById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '2'
      responses:
        '200':
          description: Success status code ( 200 )
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currencySchema'
        '404':
          description: currency not found
  /currencies/blockchain-nodes/{id}/latest-block-number:
    get:
      tags:
        - Currencies API
      summary: Get latest block number by currency
      description: |
        Get the latest blockchain block number by currency Id
      operationId: getLatestBlockNumberByCurrencyId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Success status code ( 200 )
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/latest-block-number'
        '404':
          description: Block number not found
  /currencies/conversions:
    get:
      tags:
        - Currencies API
      summary: Gets a list of all possible currency conversions
      description: |
        Get a list of all possible currency conversions
      operationId: getCurrencyConversions
      responses:
        '200':
          description: Success status code ( 200 )
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currencyConversions'
        '400':
          description: Bad request
  /merchant/invoices:
    post:
      tags:
        - Invoices API
      summary: Create Invoice
      operationId: createInvoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoice'
        description: Create Invoice
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceRes'
        '404':
          description: Merchant Not Found!
    get:
      tags:
        - Invoices API
      summary: Get invoices
      description: |
        Get list of merchant invoices
      operationId: getListOfInvoices
      parameters:
        - name: clientId
          in: query
          schema:
            type: string
            example: 9c2cbbb936824b9d91a1229321bfd03a
          description: optional clientId field to allow filtering by integration clientId.
        - name: status
          in: query
          schema:
            type: string
            example: draft, paid, pending, cancelled, completed
          description: optional status field to allow filtering by invoice status.
        - name: from
          in: query
          schema:
            type: string
            example: '2023-01-01'
          description: optional "from" field to allow filtering by invoice creation date.
        - name: to
          in: query
          schema:
            type: string
            example: '2023-01-30'
          description: optional "to" field to allow filtering by invoice creation date.
        - name: q
          in: query
          schema:
            type: string
            example: 9c2cbbb936824b9d91a1229321bfd03a
          description: optional search string to find invoices with these words.
        - name: integration
          in: query
          schema:
            type: string
            example: 9c2cbbb936824b9d91a1229321bfd03a
          description: optional integration field to allow filtering by integration.
        - name: payoutWalletId
          in: query
          schema:
            type: string
            example: 9c2cbbb936824b9d91a1229321bfd03a
          description: >-
            optional query to filter the invoices by the wallet they were paid
            out to (for 'paid' and 'completed' invoices).
        - name: limit
          in: query
          schema:
            type: integer
            example: 10
          description: used to specify the number of records to return in one page.
        - name: after
          in: query
          schema:
            type: string
            example: 9c2cbbb936824b9d91a1229321bfd03a
          description: >-
            used to specify a cursor or marker that indicates the starting point
            of the next page of data.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoices'
        '404':
          description: Merchant Not Found!
  /merchant/invoices/{id}:
    get:
      tags:
        - Invoices API
      summary: Get invoice by Id
      description: |
        Get Invoice by Id
      operationId: getInvoiceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Success status code ( 200 )
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoice'
        '400':
          description: Bad request example!
  /merchant/invoices/{id}/payouts:
    get:
      tags:
        - Invoices API
      summary: Get invoices payouts
      description: >
        Get payout details for an invoice, including if invoice has been fully
        paid out,

        the exact amount the merchant will receive and in what currency, which
        address payout will be deposited to,

        and who (Buyer) performed the payment.
      operationId: getInvoicePayouts
      parameters:
        - name: id
          in: path
          required: true
          description: invoice Id
          schema:
            type: string
            example: 5xyKTbjTMcbXMUsaprSRaP
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payouts'
        '404':
          description: Merchant Not Found!
  /merchant/invoices/{id}/hitory:
    get:
      tags:
        - Invoices API
      summary: Get invoice history
      description: |
        List history events of an invoice by the invoice Id
      operationId: getInvoiceHistory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceHistory'
        '404':
          description: Merchant Not Found!
  /merchant/wallets:
    post:
      tags:
        - Wallets API
      summary: Create wallet
      description: >
        Creates new wallet by currency Id. Note: you can get the currency Id
        from the currencies API.
      operationId: createMerchantWallet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantWallet'
        description: Create wallet payload
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewWallet'
        '404':
          description: Currency Not Found!
    get:
      tags:
        - Wallets API
      summary: Get Wallets
      description: >-
        Retrieves a list of wallets woth their balances, addresses, statuses and
        other info.
      operationId: getMerchantWallets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/arrayOfWallets'
        '404':
          description: Wallet not found
  /merchant/wallets/{walletIdStr}:
    get:
      tags:
        - Wallets API
      summary: Get Wallet by Id
      description: Retrieves wallet by its Id
      operationId: getMerchantWalletById
      parameters:
        - name: walletIdStr
          in: path
          required: true
          schema:
            type: string
            example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
          description: the wallet Id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantWalletObj'
        '404':
          description: Wallet not found
  /merchant/wallets/{walletIdStr}/addresses:
    post:
      tags:
        - Wallets API
      summary: Create address for an existing wallet
      description: >
        This endpoint creates a new address under the wallet with the specified
        ID.

        The walletIdStr parameter is a required path parameter that identifies
        the target wallet.

        The request body is optional, but if included, it can contain a label
        field to provide a label for the new address.

        The response to a successful request returns a 201 Created status code
        and an object containing the address and the address ID.
      operationId: createWalletAddress
      parameters:
        - name: walletIdStr
          in: path
          required: true
          schema:
            type: string
            example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
          description: the wallet Id
        - name: label
          in: query
          schema:
            type: string
            example: shop tests address
            description: label for the address
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addressRes'
        '404':
          description: Wallet Not Found!
    get:
      tags:
        - Wallets API
      summary: Get wallet addresses
      description: Retrieves a list of wallet addresses
      operationId: getWalletAddresss
      parameters:
        - name: walletIdStr
          in: path
          required: true
          schema:
            type: string
            example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
          description: the wallet Id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list-of-addresses'
        '404':
          description: Wallet not found
  /merchant/wallets/{walletIdStr}/transactions:
    get:
      tags:
        - Wallets API
      summary: Get wallet transactions
      description: Retrieves a list of all wallet transactions
      operationId: getTransactionsByWalletId
      parameters:
        - name: walletIdStr
          in: path
          required: true
          schema:
            type: string
            example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
          description: the wallet Id
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/arrayOfWalletTransactions'
        '404':
          description: Wallet not found
  /merchant/wallets/{walletIdStr}/transaction:
    get:
      tags:
        - Wallets API
      summary: Get wallet transaction
      description: >
        Get a specific transaction of a wallet. This request requires the
        walletIdStr URL parameter. Additionally,

        there are two optional query parameters: transactionId and
        spendRequestId.

        If both transactionId and spendRequestId are specified, transactionId
        takes precedence. If only spendRequestId is provided,

        the first transaction that matches the spendRequestId will be returned.
      operationId: getTransactionByWalletId
      parameters:
        - name: walletIdStr
          in: path
          required: true
          schema:
            type: string
            example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
          description: the wallet Id
        - name: transactionId
          in: query
          schema:
            type: string
            example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
          description: the transaction Id
        - name: spendRequestId
          in: query
          schema:
            type: string
            example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
          description: the spend request Id
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/arrayOfWalletTransactions'
        '404':
          description: Wallet not found
  /merchant/wallets/{walletIdStr}/spend/request:
    post:
      tags:
        - Wallets API
      summary: Create spend or convert request
      description: >
        The Spend Request API allows users to initiate a withdrawal or a
        conversion transaction, both features follow a two-step process:


        1- **Send spend request**: This request will trigger a response
        containing a preview of the transaction,

        including any applicable fees. The purpose of this step is to allow
        users to review and verify the information provided,

        including the amount and any associated fees before proceeding.


        2- **Confirm spending funds**: the confirm spending funds endpoint is
        used to confirm spending funds from the merchant wallet, or to confirm
        converting funds, it is used to trigger publishing the transaction on
        the blockchain.



        Note: The "spendRequestId" is included in the response from the first
        step.



        <br/>

        <br/>


        Here's a simplified flowchart explaining the withdrawal/conversion flow:


        ![markdown file changed](./withdrawal-flowchart.png)
      operationId: sendSpendRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpendRequestPayload'
        description: Withdrawal Request payload
        required: true
      parameters:
        - name: walletIdStr
          in: path
          required: true
          schema:
            type: string
            example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
          description: the wallet Id from which you intend to withdraw funds
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendRequestConfirmationSuccess'
        '400':
          description: Not enough funds
        '404':
          description: Wallet not found
  /merchant/wallets/{walletIdStr}/spend/confirmation:
    post:
      tags:
        - Wallets API
      summary: Confirm spend or convert request
      description: Send a request to confirm the withdrawal
      operationId: spendRequestConfirmation
      parameters:
        - name: walletIdStr
          in: path
          required: true
          schema:
            type: string
            example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
          description: the wallet Id from which you intend to withdraw funds
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendRequestConfirmationSuccess'
        '404':
          description: Spend confirmation not found
          $ref: '#/components/responses/Problem'
  /merchant/your-server-url:
    post:
      tags:
        - Webhooks API
      summary: Notification Payload
      description: |
        Below is the payload sent from CPs API to your server API
      operationId: notificationPayload
      responses:
        '200':
          description: Success status code ( 200 )
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notification-payload'
        '400':
          description: CoinPayments API could not reach your server
  /merchant/clients/{clientId}/webhooks:
    post:
      tags:
        - Webhooks API
      summary: Create client webhook
      description: |
        Creates new client webhook
      operationId: createWebhook
      parameters:
        - name: clientId
          in: path
          required: true
          description: client Id
          schema:
            $ref: '#/components/schemas/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhookSchema'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createWebhook'
        '404':
          description: Merchant Not Found!
    get:
      tags:
        - Webhooks API
      summary: Get webhooks of merchant
      description: |
        Get list of merchant invoices
      operationId: getMerchantWebhooks
      parameters:
        - name: clientId
          in: path
          required: true
          description: client Id
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list-webhooks'
        '404':
          description: Merchant Not Found!
  /merchant/clients/{clientId}/webhooks/{webhookId}:
    put:
      tags:
        - Webhooks API
      summary: Update Webhook
      description: |
        Update Webhook by client Id and webhook Id
      operationId: updateWebhook
      parameters:
        - name: clientId
          in: path
          required: true
          description: client Id
          schema:
            $ref: '#/components/schemas/id'
        - name: webhookId
          in: path
          required: true
          description: webhook Id
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Success status code ( 200 )
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhookSchema'
        '404':
          description: Wallet not found
    delete:
      tags:
        - Webhooks API
      summary: Delete Webhook
      description: |
        delete a webhook by client Id and webhook Id
      operationId: deleteWebhook
      parameters:
        - name: clientId
          in: path
          required: true
          description: client Id
          schema:
            $ref: '#/components/schemas/id'
        - name: webhookId
          in: path
          required: true
          description: webhook Id
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '204':
          description: Success status code - no content
        '404':
          description: Wallet not found
  /rates:
    get:
      tags:
        - Rates API
      summary: Conversion rates between currencies
      description: >
        Returns the currency conversion rates for the specified from currencies
        converted to the specified to currencies
      operationId: getConversionsBetweenTwoCurrencies
      parameters:
        - name: from
          schema:
            type: integer
          in: query
          description: >-
            comma separated list of currency ids to use as the source for rate
            calculations
          required: true
          example: 1
        - name: to
          schema:
            type: integer
          in: query
          description: >-
            comma separated list of currency ids for which to retrieve
            conversion rates for (from the from currencies)
        - name: fromToken
          in: query
          schema:
            type: integer
          description: optional, contract address of the token on the from currency
        - name: toToken
          in: query
          schema:
            type: integer
          description: optional, contract address of the token on the quote currency
      responses:
        '200':
          description: Success status code ( 200 )
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ratesRes'
        '400':
          description: Bad request
components:
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.com/api/oauth/dialog
          scopes:
            read:users: read users info
            write:users: modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
  schemas:
    logo:
      type: object
      description: currency logo / icon
      properties:
        iamgeUrl:
          type: string
        vectorUrl:
          type: string
    urls:
      type: object
      properties:
        websites:
          type: array
          items:
            type: string
          example:
            - https://bitcoin.org
        explorers:
          type: array
          items:
            type: string
            example:
              - https://blockchain.info
    currencySchema:
      type: object
      properties:
        id:
          description: currency Id
          type: string
          example: '1'
        type:
          description: currency type
          type: string
          example: crypto
        symbol:
          description: currency symbol
          type: string
          example: BTC
        name:
          description: currency name
          type: string
          example: Bitcoin
        logo:
          $ref: '#/components/schemas/logo'
        decimalPlaces:
          type: integer
          example: 0
        rank:
          type: integer
          example: 0
        status:
          type: string
          example: active
        capabilities:
          $ref: '#/components/schemas/urls'
        requiredConfirmations:
          type: integer
          example: 0
    arrayOfCurrencies:
      type: array
      items:
        $ref: '#/components/schemas/currencySchema'
    latest-block-number:
      type: object
      properties:
        currencyId:
          description: currency Id
          type: string
          example: '1'
        latestBlockNumber:
          description: latest block number
          type: integer
          example: 773862
    currencyConversions:
      type: array
      items:
        type: object
        properties:
          from:
            type: string
            example: '4'
          to:
            type: string
            example: '6'
    fullName:
      type: object
      properties:
        firstName:
          type: string
          description: first name of the buyer
        lastName:
          type: string
          description: last name of the buyer
    physicalAddress:
      type: object
      properties:
        address1:
          type: string
          description: main address
        address2:
          type: string
          description: additional address data
        address3:
          type: string
          description: additional address data
        provinceOrState:
          type: string
          description: Province or state of the buyer
        city:
          type: string
          description: city of the buyer
        suburbOrDistrict:
          type: string
          description: Suburb or district of the buyer
        countryCode:
          type: string
          format: US
        postalCode:
          type: string
          format: '10101'
    buyer:
      type: object
      properties:
        companyName:
          type: string
          format: Rushing Turtles
        name:
          $ref: '#/components/schemas/fullName'
        emailAddress:
          type: string
          description: email address of the buyer
          format: johndoe@gmail.com
        phoneNumber:
          type: string
          description: phone number of the buyer
          format: '01010101010'
        address:
          $ref: '#/components/schemas/physicalAddress'
    globalAmount:
      type: object
      properties:
        currencyId:
          type: string
          description: the currency id of the wallet or address into which to payout to
        contractAddress:
          type: string
          description: >-
            the address of the contract if this money object represents an ERC20
            or similar token value
        displayValue:
          type: string
          description: The value formatted for display (e.g 0.1234 BTC)
        value:
          type: string
          description: >
            This parameter represents the monetary value as an integer in the
            base (smallest) unit of the currency. For instance, Bitcoin can be
            divided into 8 decimal places,

            with each division known as a Satoshi. Therefore, 1 BTC would have a
            value of 100,000,000 Satoshis, and 0.00031 BTC would have a value of
            31,000 Satoshis. Similarly,

            an amount of $9.99 USD would be represented as 999 cents. In the
            case of zero-decimal currencies like the Yen, a value of ¬•500 would
            be represented as 500.

            If no value is provided, the default is 0.
        valueAsDecimal:
          type: string
          description: >
            The decimal value represents the monetary value with decimal
            precision derived from the value field, which is the integer
            representation in the smallest unit of the currency or token.
    items:
      type: object
      description: array of items that a buyer intends to purchase from the merchant
      properties:
        customId:
          type: string
          description: item Id in the merchant's system
        sku:
          type: string
          description: item SKU number
        name:
          type: string
          description: name or title of the item
          example: Iphone 22
        description:
          type: string
          description: description of the item
        quantity:
          type: object
          properties:
            value:
              type: number
              description: >-
                the quantity of the item. Must be greater than 0 and less than
                999,999,999. Defaults to 1 if not provided
            type:
              type: string
              example: 1
        originalAmount:
          $ref: '#/components/schemas/globalAmount'
        amount:
          $ref: '#/components/schemas/globalAmount'
        tax:
          $ref: '#/components/schemas/globalAmount'
    shipping:
      type: object
      properties:
        method:
          type: string
          description: Shipment method
        companyName:
          type: string
          description: Company name
        name:
          $ref: '#/components/schemas/fullName'
        emailAddress:
          type: string
          description: email address
        phoneNumber:
          type: string
          description: phone number
        address:
          $ref: '#/components/schemas/physicalAddress'
    merchantOptions:
      type: object
      properties:
        showAddress:
          type: boolean
          default: false
        showPhone:
          type: boolean
          default: false
        showRegistrationNumber:
          type: boolean
          default: false
        showEmail:
          type: boolean
          default: false
        additionalInfo:
          type: string
          format: additional Info
    notificationUrl:
      type: string
      example: https://site.com/api/{YOUR_WEBHOOK_PATH}
    notifications:
      type: array
      description: >
        specify the event name you want your server to be notified about when it
        occurs


        e.g. send notification when an invoice is created
      items:
        type: string
      example:
        - invoiceCreated
        - invoicePending
        - invoicePaid
        - invoiceCompleted
        - invoiceCancelled
    webhookSchema:
      type: object
      required:
        - notifications
        - notificationsUrl
      properties:
        notificationsUrl:
          $ref: '#/components/schemas/notificationUrl'
        notifications:
          $ref: '#/components/schemas/notifications'
    invoice:
      type: object
      description: >
        Request to create an invoice, which is a list of goods or services with
        a statement of the sum due provided

        by the merchant, that a buyer intends to purchase
      required:
        - amount
      properties:
        isEmailDelivery:
          type: boolean
          description: >-
            default value to be used for whitelabeling checkout flow. For
            invoice document delivery indicates if invoice will be email
            delivered
          default: false
        emailDelivery:
          type: object
          description: email addresses to be used for invoice delivery
          properties:
            to:
              type: string
              description: >-
                to email address. The value can take multiple addresses
                separated by semicolons
            cc:
              type: string
              description: field to add multiple recipients separated by semicolons
            bcc:
              type: string
              description: >-
                bcc field similar to "cc" field except that other recipients
                won't be able to see that someone else has been sent a copy of
                the email
        dueDate:
          type: string
          example: '2023-04-26T18:40:41.322Z'
          description: >-
            to be used for invoice doc delivery. Date when invoice is to be
            mailed out to the user
        invoiceDate:
          type: string
          example: '2022-11-28T13:59:46+00:00'
          description: to be used for invoice doc. Date when invoice was issued
        draft:
          type: boolean
          description: >-
            Default value to be used for whitelabeling checkout flow. flag
            indicating whether this is a draft invoice
          default: false
        clientId:
          type: string
          description: the id of the client (merchant) creating this invoice
        invoiceId:
          type: string
          description: >-
            default value to be used for whitelabeling checkout flow. For
            invoice document delivery invoice number assigned by the merchant
          default: false
        buyer:
          $ref: '#/components/schemas/buyer'
        description:
          type: string
          description: the purchase description, can be provided instead of a list of items
        items:
          type: array
          items:
            $ref: '#/components/schemas/items'
        amount:
          type: object
          description: |
            detailed amount of purchase with the breakdown of all fees
          properties:
            breakdown:
              type: object
              properties:
                subtotal:
                  $ref: '#/components/schemas/globalAmount'
                shipping:
                  $ref: '#/components/schemas/globalAmount'
                handling:
                  $ref: '#/components/schemas/globalAmount'
                taxTotal:
                  $ref: '#/components/schemas/globalAmount'
                discount:
                  $ref: '#/components/schemas/globalAmount'
            currencyId:
              type: string
              description: original currency Id of the item
            contractAddress:
              type: string
              description: >-
                the address of the contract if this money object represents an
                ERC20 or similar token value
            displayValue:
              type: string
              description: the value formatted for display (e.g 0.1234 BTC)
            value:
              type: string
              description: >
                this parameter represents the monetary value as an integer in
                the base (smallest) unit of the currency. For instance, Bitcoin
                can be divided into 8 decimal places,

                with each division known as a Satoshi. Therefore, 1 BTC would
                have a value of 100,000,000 Satoshis, and 0.00031 BTC would have
                a value of 31,000 Satoshis. Similarly,

                an amount of $9.99 USD would be represented as 999 cents. In the
                case of zero-decimal currencies like the Yen, a value of ¬•500
                would be represented as 500.

                If no value is provided, the default is 0
            valueAsDecimal:
              type: string
              description: >
                The decimal value represents the monetary value with decimal
                precision derived from the value field,

                which is the integer representation in the smallest unit of the
                currency or token.
        shipping:
          $ref: '#/components/schemas/shipping'
        requireBuyerNameAndEmail:
          type: boolean
          description: >-
            flag indicating whether a buyer name and email are required, they
            will be requested at checkout if not provider by the caller.
        buyerDataCollectionMessage:
          type: string
          description: the message to display when collecting buyer user data
        notes:
          type: string
          description: notes for the merchant only, these are not visible to the buyers
        notesToRecipient:
          type: string
          description: >-
            any additional information to share with the buyer about the
            transaction
        termsAndConditions:
          type: string
          description: any terms and conditions, e.g. a cancellation policy
        merchantOptions:
          $ref: '#/components/schemas/merchantOptions'
        customData:
          type: object
          description: >-
            any custom data merchant wishes to attach to the invoice that may be
            further used for custom merchant's purposes. Not visible on UI for
            buyers
          properties:
            additionalProp1:
              type: string
            additionalProp2:
              type: string
            additionalProp3:
              type: string
        metadata:
          type: object
          properties:
            integration:
              type: string
              description: integration name
              format: InvoiceBuilder
            hostname:
              type: string
              description: server name of the integration API
        poNumber:
          type: string
          description: optional Purchase order number on the integration API.
          format: InvoiceBuilder
        webhooks:
          $ref: '#/components/schemas/webhookSchema'
        payoutConfig:
          type: object
          description: >-
            configs for payout for this particular invoice. Overrides account
            payout configs
          properties:
            currencyId:
              type: string
              description: the currency Id of the wallet or address into which to payout to
            contractAddress:
              type: string
              description: >-
                the address of the contract if this money object represents an
                ERC20 or similar token value
            address:
              type: string
              description: the external address into which to pay out to
            frequency:
              type: array
              description: frequency of payout execution
              example:
                - normal
                - asSoonAsPossible
                - hourly
                - nightly
                - weekly
        payment:
          type: object
          description: >-
            is used for white labeling checkout mode. Defines additional data
            required for this type of payments
          properties:
            refundEmail:
              type: string
              description: >-
                Is used for white labeling checkout mode. Email of the payer for
                possible refund in case there is a problem with payment
    invoices:
      type: array
      items:
        $ref: '#/components/schemas/invoice'
    invoiceRes:
      type: object
      properties:
        id:
          type: string
          description: the CoinPayments id of the invoice
          example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
    id:
      type: string
      example: nKCMuD6h3Vsgs4mGDqGeV
    txId-or-hash:
      type: string
      format: '0x2446f1fd773fbb9f080e674b60c6a033c7ed7427b8b9413cf28a2a4a6da9b56c'
    currencyId:
      type: string
      description: the currency id of the wallet or address into which to payout to
      example: '1'
    paidTransaction:
      type: object
      properties:
        hash:
          $ref: '#/components/schemas/txId-or-hash'
        amount:
          type: object
          properties:
            displayValue:
              type: string
              description: The value formatted for display (e.g 0.1234 BTC)
            value:
              type: string
              description: >
                This parameter represents the monetary value as an integer in
                the base (smallest) unit of the currency. For instance, Bitcoin
                can be divided into 8 decimal places,

                with each division known as a Satoshi. Therefore, 1 BTC would
                have a value of 100,000,000 Satoshis, and 0.00031 BTC would have
                a value of 31,000 Satoshis. Similarly,

                an amount of $9.99 USD would be represented as 999 cents. In the
                case of zero-decimal currencies like the Yen, a value of ¬•500
                would be represented as 500.

                If no value is provided, the default is 0.
            currencyId:
              $ref: '#/components/schemas/currencyId'
        conversionId:
          type: number
          example: 0
    amount:
      type: object
      properties:
        displayValue:
          type: string
          description: The value formatted for display (e.g 0.1234 BTC)
        value:
          type: string
          description: >
            This parameter represents the monetary value as an integer in the
            base (smallest) unit of the currency. For instance, Bitcoin can be
            divided into 8 decimal places,

            with each division known as a Satoshi. Therefore, 1 BTC would have a
            value of 100,000,000 Satoshis, and 0.00031 BTC would have a value of
            31,000 Satoshis. Similarly,

            an amount of $9.99 USD would be represented as 999 cents. In the
            case of zero-decimal currencies like the Yen, a value of ¬•500 would
            be represented as 500.

            If no value is provided, the default is 0.
        currencyId:
          $ref: '#/components/schemas/currencyId'
    destinationAmount:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        nativeAmount:
          $ref: '#/components/schemas/amount'
    currency:
      type: object
      properties:
        id:
          description: the unique id of the currency on the CoinPayments platform
          $ref: '#/components/schemas/id'
        type:
          type: string
          description: the type of the currency (e.g crypto, token or fiat )
        symbol:
          type: string
          description: >
            ticker symbol for the currency.  For fiat currencies this is the
            three character (ISO-4217) currency code,

            and for crypto currencies their multi-character symbol.
          example: BTC
        name:
          type: string
          description: the name of the currency, e.g. 'United States Dollar' or 'Bitcoin'
        logo:
          type: object
          description: the logo urls for the currency
          properties:
            imageUrl:
              type: string
              description: >
                'Link to a CoinPayments hosted image for a currency, 64x64 is
                the default size returned.'
                 Replace "64x64" in the image url with these alternative sizes: 32, 64, 128, 200.
            vectorUrl:
              type: string
              description: >-
                If available then the link to a CoinPayments hosted vector image
                (SVG) for the currency.
        decimalPlaces:
          type: number
          description: >-
            the number of digits after the decimal separator, e.g. 2 for USD, 8
            for BTC, 0 for JPY
          example: 0
        rank:
          type: number
          description: >-
            the relative ordering/ranking of this currency to the other
            supported currencies on the CoinPayments platform
          example: 0
        capabilities:
          type: array
          description: >
            the capabilities of the currency on the CoinPayments platform:

            - multiSigAccounts: Multi signature 2-of-3 wallets where the user
            holds the private key

            - sharedAccounts: Shared accounts where the keys are held on the
            server only

            - payments: Can be accepted as payments

            - singleSigAccounts: Single signature account for personal use.
          items:
            type: string
            example: multiSigAccounts
        urls:
          type: object
          description: Contains various URLs for a currency
          properties:
            websites:
              type: array
              description: the official websites for the currency
              items:
                type: string
            explorers:
              type: array
              description: the explorers for the currency (if crypto or a token)
              items:
                type: string
    address:
      type: string
      example: mtxASJZHNmGeUPQ3DxLvJeKja6Lh7TcJM9
    fees:
      type: object
      properties:
        displayValue:
          type: string
          description: The value formatted for display (e.g 0.1234 BTC)
        contractAddress:
          description: >-
            the address of the contract if this money object represents an ERC20
            or similar token value
          $ref: '#/components/schemas/address'
        value:
          type: string
          description: >
            This parameter represents the monetary value as an integer in the
            base (smallest) unit of the currency. For instance, Bitcoin can be
            divided into 8 decimal places,

            with each division known as a Satoshi. Therefore, 1 BTC would have a
            value of 100,000,000 Satoshis, and 0.00031 BTC would have a value of
            31,000 Satoshis. Similarly,

            an amount of $9.99 USD would be represented as 999 cents. In the
            case of zero-decimal currencies like the Yen, a value of ¬•500 would
            be represented as 500.

            If no value is provided, the default is 0.
        currencyId:
          $ref: '#/components/schemas/currencyId'
    simulateFees:
      type: object
      properties:
        displayValue:
          type: string
        contractAddress:
          $ref: '#/components/schemas/address'
        value:
          type: string
        currencyId:
          $ref: '#/components/schemas/currencyId'
    merchantFees:
      type: object
      properties:
        transactionFees:
          $ref: '#/components/schemas/fees'
        networkFee:
          description: >-
            An object with the same fields as the fees object in the
            "transactionFee"
          $ref: '#/components/schemas/simulateFees'
        conversionFee:
          description: >-
            An object with the same fields as the fees object in the
            "transactionFee"
          $ref: '#/components/schemas/simulateFees'
    datetime:
      type: string
      example: '2022-11-29T19:10:04.228Z'
    item:
      type: object
      properties:
        currency:
          description: the currency (merchant's accepted currency) that will be received
          $ref: '#/components/schemas/currency'
        merchantFees:
          description: The amount for service fees in the merchant's accepted currency
          $ref: '#/components/schemas/merchantFees'
        payoutAmount:
          description: >
            This is the amount to be finally paid out to the merchant in the
            merchant's accepted currency.

            An object with the same fields and desription as the fees object in
            the "transactionFee" under merchantFees.
          $ref: '#/components/schemas/simulateFees'
        payoutAmountInInvoiceCurrency:
          description: >
            The Pay out amount in the invoice currency.

            An object with the same fields and desription as the fees object in
            the "transactionFee" under merchantFees.
          $ref: '#/components/schemas/simulateFees'
        merchantFeestInInvoiceCurrency:
          description: >
            The merchant fees in the invoice currency.

            An object with the same fields as the fees object in the
            "transactionFee" under merchantFees.
          $ref: '#/components/schemas/simulateFees'
        merchantPayoutAddress:
          type: string
          description: >-
            the merchant's payment output address at the time the hot wallet was
            created
        sent:
          description: >-
            the timestamp of when this payout was sent (e.g. broadcast on the
            blockchain)
          $ref: '#/components/schemas/datetime'
        created:
          $ref: '#/components/schemas/datetime'
        expected:
          description: >-
            the approximate timestamp of when this payout is expected to be sent
            (e.g. broadcast on the blockchain)
          $ref: '#/components/schemas/datetime'
        confirmed:
          description: >-
            the timestamp of when this payout was confirmed (e.g. on the
            blockchain)
          $ref: '#/components/schemas/datetime'
        state:
          type: string
          description: the current state of the payout
    payouts:
      type: object
      properties:
        paidTransactions:
          type: array
          description: >-
            An array of paid transaction details, including transaction hash,
            amount, and conversion Id.
          items:
            $ref: '#/components/schemas/paidTransaction'
        paidDate:
          type: string
          description: The date and time when the payment was made.
          format: '2022-11-29T12:42:44.513Z'
        completedTxId:
          type: string
          description: The ID of the completed transaction.
          format: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
        externalAddress:
          type: string
          description: The external address where the payout is deposited
          format: 378a37b57b6b4a4a93fd352b06ce1829
        destinationCurrencyId:
          type: string
          description: The currency ID of the destination address for the payout
          format: '1'
        expectedDisplayValue:
          type: string
          description: The expected amount of the payout.
          format: '0.01'
        sourceCurrencyId:
          type: string
          description: The ID of the source currency for the payout
          format: '101'
        destinationAccountId:
          type: string
          description: The ID of the destination account for the payout
          format: 378a37b57b6b4a4a93fd352b06ce1829
        isConversion:
          type: boolean
          description: Indicates whether a currency conversion is involved in the payout
          example: false
        conversionProgress:
          type: string
          description: The progress status of the currency conversion
          example: 0
        settlementModeErrorCode:
          type: number
          example: 0
        destinationAmount:
          description: >-
            The destination amount of the payout, including the ammount in the
            buyer's currency (amount) and the amount in the seller's currency
            (nativeAmount)
          $ref: '#/components/schemas/destinationAmount'
        items:
          type: array
          items:
            $ref: '#/components/schemas/item'
    invoiceHistoryItems:
      type: object
      properties:
        timestamp:
          type: string
          description: the timestamp of when the this event was observed
          example: '2023-05-29T19:58:50.043Z'
        eventType:
          type: string
          description: the type of event that was observed
    paging:
      type: object
      properties:
        cursor:
          type: object
          properties:
            before:
              type: string
            after:
              type: string
        limit:
          type: integer
          example: 0
        first:
          type: string
        next:
          type: string
        previous:
          type: string
        last:
          type: string
    invoiceHistory:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/invoiceHistoryItems'
        paging:
          $ref: '#/components/schemas/paging'
    MerchantWalletObj:
      type: object
      properties:
        walletId:
          description: Id of the wallet
          type: string
          example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
        currencyId:
          description: Id of the currency which this wallet was created for
          type: number
          example: 1
        label:
          description: label of the wallet
          type: string
          example: John's wallet
        balance:
          description: balance of the wallet in smallest units (e.g. Satoshis for Bitcoin)
          type: string
          example: '0.874833322'
        tokenBalances:
          description: >-
            token (e.g. ERC20) balances for this wallet if available in smallest
            units (e.g. Weis for Ethereum)
          type: string
          example: '0xdac17f958d2ee523a2206206994597c13d831ec7'
        depositAddress:
          description: blockchain address of this wallet allowing it to receive funds
          type: string
          example: '0x9939b7b208012cd0395d1411272be6e34c04af7b'
        walletStatus:
          description: >
            status of the wallet, should be Active (2) for valid usable wallets.

            walletStatues can hold one of the following values [Created, Active,
            Deactivated or Deleted]
          type: string
          example: Active
        canCreateAddress:
          description: >-
            specifies whether this wallet is allowed to create additional
            deposit addresses
          type: boolean
          example: true
        updatedAt:
          description: the date when the properties of the wallet were last updated
          type: string
          example: '2022-10-05T06:05:07.520Z'
        isVaultLocked:
          description: flag that determines if the wallet vault is locked or not
          type: boolean
          example: true
        vaultLockoutEndDateTime:
          description: >-
            when used, the vault will start the countdown to unlock when when
            the specified date and time is reached
          type: string
          example: '2023-07-04T22:21:41.535Z'
    arrayOfWallets:
      type: array
      items:
        $ref: '#/components/schemas/MerchantWalletObj'
    MerchantWallet:
      type: object
      required:
        - currencyId
        - label
      properties:
        currencyId:
          description: user supplied currencyId
          type: number
          example: 1
        label:
          description: Label denoting the wallet
          type: string
          example: John's wallet
        webhookUrl:
          description: >-
            when provided, CoinPayments API will be sending notifications to
            this URL when withdrawals are processed or when funds are moved
          type: string
          example: https://myapi.com
    NewWallet:
      type: object
      properties:
        walletId:
          description: Id of newly created wallet
          type: string
          example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
        address:
          description: deposit address
          type: string
          example: LaN1Vy2FugxWiAyMc8ipKe6Hcnh3mcKuym
    addressRes:
      type: object
      properties:
        addressId:
          description: Id of newly created address
          type: string
          example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
        networkAddress:
          description: the network address that was created.
          type: string
          example: LNUPQLeQFfF67RtH1dqFBiwJhYBNZCW7pm
    list-of-addresses:
      type: array
      items:
        $ref: '#/components/schemas/addressRes'
    WalletTransactionObj:
      type: object
      properties:
        id:
          description: Id of the transaction in the system
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        dateCreated:
          description: Date when transaction was created
          type: string
          example: '2022-10-05T08:39:41.494Z'
        dateCompleted:
          description: Date when transaction was received or sent to the chain
          type: string
          example: '2022-10-05T08:40:41.494Z'
        fromOwnerId:
          description: Id of the owner of the wallet who sent the transaction
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        fromWalletId:
          description: Id of the wallet which the transaction was sent from
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        toWalletId:
          description: Id of the wallet which the transaction was sent to
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        fromCurrencyId:
          description: Id of the currency that was used to send this transaction
          type: number
          example: 1
        toCurrencyId:
          description: Id of the currency which this transaction is sending funds to
          type: number
          example: 2
        fromAmount:
          description: >-
            Amount of funds that was sent in this transaction in smallest units
            (e.g. Satoshis for Bitcoin)
          type: string
          example: '0.22390234'
        toAmount:
          description: >-
            Amount of funds that was received in this transaction in smallest
            units (e.g. Satoshis for Bitcoin)
          type: string
          example: '0.13448434'
        fromAddress:
          description: >-
            Address of the wallet which was used when this transaction was
            created
          type: string
          example: 1AYASDI34W2W2SIFFRE32452S1Q
        toAddress:
          description: Address which this transaction is sending funds to
          type: string
          example: 1AYASDI34W2W2SIFFRE32452S1Q
        fromContractAddress:
          description: >-
            Address of the sender contract. e.g.
            "0xdac17f958d2ee523a2206206994597c13d831ec7" for ERC20 TetherUSD
          type: string
          example: '0xdac17f958d2ee523a2206206994597c13d831ec7'
        toContractAddress:
          description: >-
            Address of the reciever contract. e.g.
            "0xdac17f958d2ee523a2206206994597c13d831ec7" for ERC20 TetherUSD
          type: string
          example: '0xdac17f958d2ee523a2206206994597c13d831ec7'
        confirmations:
          description: Current number of confirmations that this transaction has
          type: number
          example: 2
        requiredConfirmations:
          description: >-
            Required number of confirmations to consider this transaction
            confirmed
          type: number
          example: 5
        spendRequestId:
          description: Id of the spend request which was used to create this transaction
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        coinPaymentsFee:
          description: >-
            Amount of funds withheld as system fee for this transaction in
            smallest units (e.g. Satoshis for Bitcoin)
          type: string
          example: '0.000012'
        transactionStatus:
          description: Status of this transaction
          type: string
          example: unknown
        transactionType:
          description: Type of this transaction
          type: string
          example: unknown
        memo:
          description: User-defined custom note for this transaction
          type: string
          example: July rent
        txHash:
          description: Blockchain transaction hash (only for external transfers)
          type: string
          example: 1AYASDI34W2W2SIFFRE32452S1Q3289y7debugDSDSd38d3xSSA33ASDRxw98
        outputIndex:
          description: >-
            Index of the output in which this transaction receives funds (only
            for UTXO received transactions)
          type: number
          example: 1
        blockchainFee:
          description: >-
            Amount of funds spent as a blockchain fee for this transaction in
            smallest units (e.g. Satoshis for Bitcoin)
          type: string
          example: '0.00000032'
        feeCurrency:
          description: >-
            Currency in which CoinPayments fees were deducted. The format is
            {CurrencyId}:{ContractAddress} where ContractAddress is optional
            e.g.null "1", "4:0xdac17f958d2ee523a2206206994597c13d831ec7"
          type: string
          example: '0.00000032'
        blockNumberTxAppearedAt:
          description: date of appearing the transaction in the blockchain
          type: string
          example: '2022-10-05T08:40:41.494Z'
    arrayOfWalletTransactions:
      type: array
      items:
        $ref: '#/components/schemas/WalletTransactionObj'
    SpendRequestPayload:
      type: object
      required:
        - toCurrencyId
        - amountInSmallestUnits
        - toAddress
      properties:
        fromContractAddress:
          description: >-
            Address of the contract e.g.
            "0xdac17f958d2ee523a2206206994597c13d831ec7" for ERC20 TetherUSD
          type: string
          example: '0xB8c77482e45F1F44dE1745F52C74426C631bDD52'
        toContractAddress:
          description: >-
            Address of the contract of the CurrencyId e.g.
            "0xdac17f958d2ee523a2206206994597c13d831ec7" for ERC20 TetherUSD
          type: string
          example: '0xB8c77482e45F1F44dE1745F52C74426C631bDD52'
        toAddress:
          description: Address which client wants to send funds to
          type: string
          example: mtxASJZHNmGeUPQ3DxLvJeKja6Lh7TcJM9
        toCurrencyId:
          description: currency Id of benificiary wallet
          type: number
          example: 6
        amountInSmallestUnits:
          description: >
            refers to the amount of a specific cryptocurrency, such as Bitcoin,
            measured in its smallest divisible unit, AKA atomic units

            (e.g., Satoshis for Bitcoin).

            It allows for precise and detailed transactions by specifying the
            amount in the smallest possible denomination.

            This approach enables you to send fractional amounts of the currency
            accurately.
          type: string
          example: '9900000'
        blockchainFeeOverrideInSmallestUnits:
          description: >-
            Used for overriding the system suggested blockchain fee (within 10%
            range) to manage the transaction processing speed
          type: number
          example: '0.0003234'
        memo:
          description: user-defined note for the spend
          type: string
        receiverPaysFee:
          description: >
            When set to true, the receiver of the conversion will pay the fees.
            In this case,

            the AmountInSmallestUnits will be deducted from the source balance,
            and the receiver will receive the remaining amount after deducting
            the fees.

            When set to false (or not provided), the fees will be added to the
            AmountInSmallestUnits,

            and the total sum (including fees) will be deducted from the source
            balance.

            The receiver will receive the AmountInSmallestUnits exactly as
            specified.
          type: boolean
          example: false
    SpendRequestConfirmationSuccess:
      type: object
      properties:
        spendRequestId:
          description: Id of spend request
          type: string
          example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
        fromWalletId:
          description: Id of wallet from which the amount is to be deducted
          type: string
          example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
        fromContractAddress:
          description: >-
            Address of the contract (if the withdrawal is from a contract
            wallet)
          type: string
          example: '0xB8c77482e45F1F44dE1745F52C74426C631bDD52'
        fromCurrencyId:
          description: Id of the currency from which the amount is to be deducted
          type: string
          example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
        toAddress:
          description: Address to which the amount is to be transferred
          type: string
          example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
        toContractAddress:
          description: Address of the contract (if the withdrawal is to a contract wallet)
          type: string
          example: '0xB8c77482e45F1F44dE1745F52C74426C631bDD52'
        toCurrencyId:
          description: Id of the currency to which the amount is to be transferred
          type: string
          example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
        blockchainFee:
          description: Fee to be paid to the blockchain
          type: number
          example: 0.0001
        coinpaymentsFee:
          description: Fee to be paid to coinpayments
          type: number
          example: 0.0001
        fromAmount:
          description: Amount to be deducted from the wallet
          type: number
          example: 0.0987
        toAmount:
          description: Amount to be transferred to the address
          type: number
          example: 0.0123
        memo:
          description: Optional user-defined note for the spend
          type: string
          example: This is a memo
    Problem:
      type: object
      additionalProperties: true
      minProperties: 1
      description: >-
        The Problem Details JSON Object
        [[RFC7807](https://tools.ietf.org/html/rfc7807)].
      properties:
        type:
          type: string
          description: >-
            A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]
            that identifies the problem type. It should provide human-readable
            documentation for the problem type. When this member is not present,
            its value is assumed to be "about:blank".
          format: uri
        title:
          type: string
          description: >-
            A short, human-readable summary of the problem type. It SHOULD NOT
            change from occurrence to occurrence of the problem, except for
            purposes of localization.
        status:
          type: integer
          description: The HTTP status code.
          minimum: 400
          maximum: 599
        detail:
          type: string
          description: >-
            A human-readable explanation specific to this occurrence of the
            problem.
        instance:
          type: string
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem.  It may or may not yield further information if
            dereferenced.
    notification-payload:
      type: object
      properties:
        id:
          description: callback address id
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        type:
          description: event type ( e.g "invoiceCreated", "invoiceComplete",.. )
          type: string
          example: invoiceCreated
        timestamp:
          description: date and time of creating the callback address
          type: string
          example: 2023-04-07T06:58:19.9798764+00:0
        invoice:
          $ref: '#/components/schemas/invoice'
    itemRes:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        notificationUrl:
          $ref: '#/components/schemas/notificationUrl'
        notifications:
          $ref: '#/components/schemas/notifications'
        paging:
          $ref: '#/components/schemas/paging'
    list-webhooks:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/itemRes'
    createWebhook:
      type: object
      properties:
        id:
          type: string
          description: webhook id
          example: 0a54b29f-51cb-44a8-9bed-111c5cb1b335
    rateItemRes:
      type: object
      properties:
        baseCurrencyId:
          type: number
          description: the currency code of the source/base currency
          example: 1
        quoteCurrencyId:
          type: number
          description: the currency code of the target/quoted currency
        rate:
          type: string
          description: >-
            the conversion rate to convert from BaseCurrencyId into
            QuoteCurrencyId
        baseToken:
          type: string
          description: >-
            the contract address of the source/base token on the base currency
            platform
        quoteToken:
          type: string
          description: >-
            the contract address of the target/quoted token on the quoted
            currency platform
    ratesRes:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/rateItemRes'
  responses:
    Problem:
      description: Problem
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
